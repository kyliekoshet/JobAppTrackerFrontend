{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:8000/api/v1';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Job Applications API\nexport const jobApplicationsApi = {\n  // Get all job applications with pagination and filters\n  getAll: async params => {\n    const response = await api.get('/job-applications', {\n      params\n    });\n    return response.data;\n  },\n  // Get a single job application by ID\n  getById: async id => {\n    const response = await api.get(`/job-applications/${id}`);\n    return response.data;\n  },\n  // Create a new job application\n  create: async data => {\n    const response = await api.post('/job-applications', data);\n    return response.data;\n  },\n  // Update a job application\n  update: async (id, data) => {\n    const response = await api.put(`/job-applications/${id}`, data);\n    return response.data;\n  },\n  // Delete a job application\n  delete: async id => {\n    await api.delete(`/job-applications/${id}`);\n  },\n  // Get summary statistics\n  getStats: async () => {\n    const response = await api.get('/job-applications/stats');\n    return response.data;\n  }\n};\n\n// Job Scraping API\nexport const jobScrapingApi = {\n  // Scrape job details from URL\n  scrapeJob: async url => {\n    const response = await api.post('/scrape-job', {\n      url\n    });\n    return response.data;\n  }\n};\n\n// Health check\nexport const healthApi = {\n  check: async () => {\n    const response = await api.get('/health');\n    return response.data;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","jobApplicationsApi","getAll","params","response","get","data","getById","id","post","update","put","delete","getStats","jobScrapingApi","scrapeJob","url","healthApi","check"],"sources":["/Users/kyliekoshet/Documents/MyProjects/JobAppliciationTracker/JobAppTrackerFrontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport {\n  JobApplication,\n  JobApplicationCreate,\n  JobApplicationUpdate,\n  JobApplicationList,\n  ScrapingRequest,\n  ScrapingResponse,\n  SummaryStats\n} from '../types/jobApplication';\n\nconst API_BASE_URL = 'http://localhost:8000/api/v1';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Job Applications API\nexport const jobApplicationsApi = {\n  // Get all job applications with pagination and filters\n  getAll: async (params?: {\n    page?: number;\n    size?: number;\n    status?: string;\n    company?: string;\n    sort_by?: string;\n    sort_order?: 'asc' | 'desc';\n  }): Promise<JobApplicationList> => {\n    const response = await api.get('/job-applications', { params });\n    return response.data;\n  },\n\n  // Get a single job application by ID\n  getById: async (id: number): Promise<JobApplication> => {\n    const response = await api.get(`/job-applications/${id}`);\n    return response.data;\n  },\n\n  // Create a new job application\n  create: async (data: JobApplicationCreate): Promise<JobApplication> => {\n    const response = await api.post('/job-applications', data);\n    return response.data;\n  },\n\n  // Update a job application\n  update: async (id: number, data: JobApplicationUpdate): Promise<JobApplication> => {\n    const response = await api.put(`/job-applications/${id}`, data);\n    return response.data;\n  },\n\n  // Delete a job application\n  delete: async (id: number): Promise<void> => {\n    await api.delete(`/job-applications/${id}`);\n  },\n\n  // Get summary statistics\n  getStats: async (): Promise<SummaryStats> => {\n    const response = await api.get('/job-applications/stats');\n    return response.data;\n  },\n};\n\n// Job Scraping API\nexport const jobScrapingApi = {\n  // Scrape job details from URL\n  scrapeJob: async (url: string): Promise<ScrapingResponse> => {\n    const response = await api.post('/scrape-job', { url } as ScrapingRequest);\n    return response.data;\n  },\n};\n\n// Health check\nexport const healthApi = {\n  check: async (): Promise<{ status: string }> => {\n    const response = await api.get('/health');\n    return response.data;\n  },\n};\n\nexport default api; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAWzB,MAAMC,YAAY,GAAG,8BAA8B;;AAEnD;AACA,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAEH,YAAY;EACrBI,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,kBAAkB,GAAG;EAChC;EACAC,MAAM,EAAE,MAAOC,MAOd,IAAkC;IACjC,MAAMC,QAAQ,GAAG,MAAMP,GAAG,CAACQ,GAAG,CAAC,mBAAmB,EAAE;MAAEF;IAAO,CAAC,CAAC;IAC/D,OAAOC,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAC,OAAO,EAAE,MAAOC,EAAU,IAA8B;IACtD,MAAMJ,QAAQ,GAAG,MAAMP,GAAG,CAACQ,GAAG,CAAC,qBAAqBG,EAAE,EAAE,CAAC;IACzD,OAAOJ,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAR,MAAM,EAAE,MAAOQ,IAA0B,IAA8B;IACrE,MAAMF,QAAQ,GAAG,MAAMP,GAAG,CAACY,IAAI,CAAC,mBAAmB,EAAEH,IAAI,CAAC;IAC1D,OAAOF,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAI,MAAM,EAAE,MAAAA,CAAOF,EAAU,EAAEF,IAA0B,KAA8B;IACjF,MAAMF,QAAQ,GAAG,MAAMP,GAAG,CAACc,GAAG,CAAC,qBAAqBH,EAAE,EAAE,EAAEF,IAAI,CAAC;IAC/D,OAAOF,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAM,MAAM,EAAE,MAAOJ,EAAU,IAAoB;IAC3C,MAAMX,GAAG,CAACe,MAAM,CAAC,qBAAqBJ,EAAE,EAAE,CAAC;EAC7C,CAAC;EAED;EACAK,QAAQ,EAAE,MAAAA,CAAA,KAAmC;IAC3C,MAAMT,QAAQ,GAAG,MAAMP,GAAG,CAACQ,GAAG,CAAC,yBAAyB,CAAC;IACzD,OAAOD,QAAQ,CAACE,IAAI;EACtB;AACF,CAAC;;AAED;AACA,OAAO,MAAMQ,cAAc,GAAG;EAC5B;EACAC,SAAS,EAAE,MAAOC,GAAW,IAAgC;IAC3D,MAAMZ,QAAQ,GAAG,MAAMP,GAAG,CAACY,IAAI,CAAC,aAAa,EAAE;MAAEO;IAAI,CAAoB,CAAC;IAC1E,OAAOZ,QAAQ,CAACE,IAAI;EACtB;AACF,CAAC;;AAED;AACA,OAAO,MAAMW,SAAS,GAAG;EACvBC,KAAK,EAAE,MAAAA,CAAA,KAAyC;IAC9C,MAAMd,QAAQ,GAAG,MAAMP,GAAG,CAACQ,GAAG,CAAC,SAAS,CAAC;IACzC,OAAOD,QAAQ,CAACE,IAAI;EACtB;AACF,CAAC;AAED,eAAeT,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}