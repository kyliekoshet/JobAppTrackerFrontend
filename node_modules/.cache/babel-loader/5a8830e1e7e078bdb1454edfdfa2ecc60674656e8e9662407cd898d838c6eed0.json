{"ast":null,"code":"import { $ZodRegistry, globalRegistry } from \"./registries.js\";\nimport { getEnumValues } from \"./util.js\";\nexport class JSONSchemaGenerator {\n  constructor(params) {\n    this.counter = 0;\n    this.metadataRegistry = params?.metadata ?? globalRegistry;\n    this.target = params?.target ?? \"draft-2020-12\";\n    this.unrepresentable = params?.unrepresentable ?? \"throw\";\n    this.override = params?.override ?? (() => {});\n    this.io = params?.io ?? \"output\";\n    this.seen = new Map();\n  }\n  process(schema) {\n    let _params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      path: [],\n      schemaPath: []\n    };\n    var _a;\n    const def = schema._zod.def;\n    const formatMap = {\n      guid: \"uuid\",\n      url: \"uri\",\n      datetime: \"date-time\",\n      json_string: \"json-string\",\n      regex: \"\" // do not set\n    };\n    // check for schema in seens\n    const seen = this.seen.get(schema);\n    if (seen) {\n      seen.count++;\n      // check if cycle\n      const isCycle = _params.schemaPath.includes(schema);\n      if (isCycle) {\n        seen.cycle = _params.path;\n      }\n      return seen.schema;\n    }\n    // initialize\n    const result = {\n      schema: {},\n      count: 1,\n      cycle: undefined,\n      path: _params.path\n    };\n    this.seen.set(schema, result);\n    // custom method overrides default behavior\n    const overrideSchema = schema._zod.toJSONSchema?.();\n    if (overrideSchema) {\n      result.schema = overrideSchema;\n    } else {\n      const params = {\n        ..._params,\n        schemaPath: [..._params.schemaPath, schema],\n        path: _params.path\n      };\n      const parent = schema._zod.parent;\n      if (parent) {\n        // schema was cloned from another schema\n        result.ref = parent;\n        this.process(parent, params);\n        this.seen.get(parent).isParent = true;\n      } else {\n        const _json = result.schema;\n        switch (def.type) {\n          case \"string\":\n            {\n              const json = _json;\n              json.type = \"string\";\n              const {\n                minimum,\n                maximum,\n                format,\n                patterns,\n                contentEncoding\n              } = schema._zod.bag;\n              if (typeof minimum === \"number\") json.minLength = minimum;\n              if (typeof maximum === \"number\") json.maxLength = maximum;\n              // custom pattern overrides format\n              if (format) {\n                json.format = formatMap[format] ?? format;\n                if (json.format === \"\") delete json.format; // empty format is not valid\n              }\n              if (contentEncoding) json.contentEncoding = contentEncoding;\n              if (patterns && patterns.size > 0) {\n                const regexes = [...patterns];\n                if (regexes.length === 1) json.pattern = regexes[0].source;else if (regexes.length > 1) {\n                  result.schema.allOf = [...regexes.map(regex => ({\n                    ...(this.target === \"draft-7\" ? {\n                      type: \"string\"\n                    } : {}),\n                    pattern: regex.source\n                  }))];\n                }\n              }\n              break;\n            }\n          case \"number\":\n            {\n              const json = _json;\n              const {\n                minimum,\n                maximum,\n                format,\n                multipleOf,\n                exclusiveMaximum,\n                exclusiveMinimum\n              } = schema._zod.bag;\n              if (typeof format === \"string\" && format.includes(\"int\")) json.type = \"integer\";else json.type = \"number\";\n              if (typeof exclusiveMinimum === \"number\") json.exclusiveMinimum = exclusiveMinimum;\n              if (typeof minimum === \"number\") {\n                json.minimum = minimum;\n                if (typeof exclusiveMinimum === \"number\") {\n                  if (exclusiveMinimum >= minimum) delete json.minimum;else delete json.exclusiveMinimum;\n                }\n              }\n              if (typeof exclusiveMaximum === \"number\") json.exclusiveMaximum = exclusiveMaximum;\n              if (typeof maximum === \"number\") {\n                json.maximum = maximum;\n                if (typeof exclusiveMaximum === \"number\") {\n                  if (exclusiveMaximum <= maximum) delete json.maximum;else delete json.exclusiveMaximum;\n                }\n              }\n              if (typeof multipleOf === \"number\") json.multipleOf = multipleOf;\n              break;\n            }\n          case \"boolean\":\n            {\n              const json = _json;\n              json.type = \"boolean\";\n              break;\n            }\n          case \"bigint\":\n            {\n              if (this.unrepresentable === \"throw\") {\n                throw new Error(\"BigInt cannot be represented in JSON Schema\");\n              }\n              break;\n            }\n          case \"symbol\":\n            {\n              if (this.unrepresentable === \"throw\") {\n                throw new Error(\"Symbols cannot be represented in JSON Schema\");\n              }\n              break;\n            }\n          case \"null\":\n            {\n              _json.type = \"null\";\n              break;\n            }\n          case \"any\":\n            {\n              break;\n            }\n          case \"unknown\":\n            {\n              break;\n            }\n          case \"undefined\":\n            {\n              if (this.unrepresentable === \"throw\") {\n                throw new Error(\"Undefined cannot be represented in JSON Schema\");\n              }\n              break;\n            }\n          case \"void\":\n            {\n              if (this.unrepresentable === \"throw\") {\n                throw new Error(\"Void cannot be represented in JSON Schema\");\n              }\n              break;\n            }\n          case \"never\":\n            {\n              _json.not = {};\n              break;\n            }\n          case \"date\":\n            {\n              if (this.unrepresentable === \"throw\") {\n                throw new Error(\"Date cannot be represented in JSON Schema\");\n              }\n              break;\n            }\n          case \"array\":\n            {\n              const json = _json;\n              const {\n                minimum,\n                maximum\n              } = schema._zod.bag;\n              if (typeof minimum === \"number\") json.minItems = minimum;\n              if (typeof maximum === \"number\") json.maxItems = maximum;\n              json.type = \"array\";\n              json.items = this.process(def.element, {\n                ...params,\n                path: [...params.path, \"items\"]\n              });\n              break;\n            }\n          case \"object\":\n            {\n              const json = _json;\n              json.type = \"object\";\n              json.properties = {};\n              const shape = def.shape; // params.shapeCache.get(schema)!;\n              for (const key in shape) {\n                json.properties[key] = this.process(shape[key], {\n                  ...params,\n                  path: [...params.path, \"properties\", key]\n                });\n              }\n              // required keys\n              const allKeys = new Set(Object.keys(shape));\n              // const optionalKeys = new Set(def.optional);\n              const requiredKeys = new Set([...allKeys].filter(key => {\n                const v = def.shape[key]._zod;\n                if (this.io === \"input\") {\n                  return v.optin === undefined;\n                } else {\n                  return v.optout === undefined;\n                }\n              }));\n              if (requiredKeys.size > 0) {\n                json.required = Array.from(requiredKeys);\n              }\n              // catchall\n              if (def.catchall?._zod.def.type === \"never\") {\n                // strict\n                json.additionalProperties = false;\n              } else if (!def.catchall) {\n                // regular\n                if (this.io === \"output\") json.additionalProperties = false;\n              } else if (def.catchall) {\n                json.additionalProperties = this.process(def.catchall, {\n                  ...params,\n                  path: [...params.path, \"additionalProperties\"]\n                });\n              }\n              break;\n            }\n          case \"union\":\n            {\n              const json = _json;\n              json.anyOf = def.options.map((x, i) => this.process(x, {\n                ...params,\n                path: [...params.path, \"anyOf\", i]\n              }));\n              break;\n            }\n          case \"intersection\":\n            {\n              const json = _json;\n              const a = this.process(def.left, {\n                ...params,\n                path: [...params.path, \"allOf\", 0]\n              });\n              const b = this.process(def.right, {\n                ...params,\n                path: [...params.path, \"allOf\", 1]\n              });\n              const isSimpleIntersection = val => \"allOf\" in val && Object.keys(val).length === 1;\n              const allOf = [...(isSimpleIntersection(a) ? a.allOf : [a]), ...(isSimpleIntersection(b) ? b.allOf : [b])];\n              json.allOf = allOf;\n              break;\n            }\n          case \"tuple\":\n            {\n              const json = _json;\n              json.type = \"array\";\n              const prefixItems = def.items.map((x, i) => this.process(x, {\n                ...params,\n                path: [...params.path, \"prefixItems\", i]\n              }));\n              if (this.target === \"draft-2020-12\") {\n                json.prefixItems = prefixItems;\n              } else {\n                json.items = prefixItems;\n              }\n              if (def.rest) {\n                const rest = this.process(def.rest, {\n                  ...params,\n                  path: [...params.path, \"items\"]\n                });\n                if (this.target === \"draft-2020-12\") {\n                  json.items = rest;\n                } else {\n                  json.additionalItems = rest;\n                }\n              }\n              // additionalItems\n              if (def.rest) {\n                json.items = this.process(def.rest, {\n                  ...params,\n                  path: [...params.path, \"items\"]\n                });\n              }\n              // length\n              const {\n                minimum,\n                maximum\n              } = schema._zod.bag;\n              if (typeof minimum === \"number\") json.minItems = minimum;\n              if (typeof maximum === \"number\") json.maxItems = maximum;\n              break;\n            }\n          case \"record\":\n            {\n              const json = _json;\n              json.type = \"object\";\n              json.propertyNames = this.process(def.keyType, {\n                ...params,\n                path: [...params.path, \"propertyNames\"]\n              });\n              json.additionalProperties = this.process(def.valueType, {\n                ...params,\n                path: [...params.path, \"additionalProperties\"]\n              });\n              break;\n            }\n          case \"map\":\n            {\n              if (this.unrepresentable === \"throw\") {\n                throw new Error(\"Map cannot be represented in JSON Schema\");\n              }\n              break;\n            }\n          case \"set\":\n            {\n              if (this.unrepresentable === \"throw\") {\n                throw new Error(\"Set cannot be represented in JSON Schema\");\n              }\n              break;\n            }\n          case \"enum\":\n            {\n              const json = _json;\n              const values = getEnumValues(def.entries);\n              // Number enums can have both string and number values\n              if (values.every(v => typeof v === \"number\")) json.type = \"number\";\n              if (values.every(v => typeof v === \"string\")) json.type = \"string\";\n              json.enum = values;\n              break;\n            }\n          case \"literal\":\n            {\n              const json = _json;\n              const vals = [];\n              for (const val of def.values) {\n                if (val === undefined) {\n                  if (this.unrepresentable === \"throw\") {\n                    throw new Error(\"Literal `undefined` cannot be represented in JSON Schema\");\n                  } else {\n                    // do not add to vals\n                  }\n                } else if (typeof val === \"bigint\") {\n                  if (this.unrepresentable === \"throw\") {\n                    throw new Error(\"BigInt literals cannot be represented in JSON Schema\");\n                  } else {\n                    vals.push(Number(val));\n                  }\n                } else {\n                  vals.push(val);\n                }\n              }\n              if (vals.length === 0) {\n                // do nothing (an undefined literal was stripped)\n              } else if (vals.length === 1) {\n                const val = vals[0];\n                json.type = val === null ? \"null\" : typeof val;\n                json.const = val;\n              } else {\n                if (vals.every(v => typeof v === \"number\")) json.type = \"number\";\n                if (vals.every(v => typeof v === \"string\")) json.type = \"string\";\n                if (vals.every(v => typeof v === \"boolean\")) json.type = \"string\";\n                if (vals.every(v => v === null)) json.type = \"null\";\n                json.enum = vals;\n              }\n              break;\n            }\n          case \"file\":\n            {\n              const json = _json;\n              const file = {\n                type: \"string\",\n                format: \"binary\",\n                contentEncoding: \"binary\"\n              };\n              const {\n                minimum,\n                maximum,\n                mime\n              } = schema._zod.bag;\n              if (minimum !== undefined) file.minLength = minimum;\n              if (maximum !== undefined) file.maxLength = maximum;\n              if (mime) {\n                if (mime.length === 1) {\n                  file.contentMediaType = mime[0];\n                  Object.assign(json, file);\n                } else {\n                  json.anyOf = mime.map(m => {\n                    const mFile = {\n                      ...file,\n                      contentMediaType: m\n                    };\n                    return mFile;\n                  });\n                }\n              } else {\n                Object.assign(json, file);\n              }\n              // if (this.unrepresentable === \"throw\") {\n              //   throw new Error(\"File cannot be represented in JSON Schema\");\n              // }\n              break;\n            }\n          case \"transform\":\n            {\n              if (this.unrepresentable === \"throw\") {\n                throw new Error(\"Transforms cannot be represented in JSON Schema\");\n              }\n              break;\n            }\n          case \"nullable\":\n            {\n              const inner = this.process(def.innerType, params);\n              _json.anyOf = [inner, {\n                type: \"null\"\n              }];\n              break;\n            }\n          case \"nonoptional\":\n            {\n              this.process(def.innerType, params);\n              result.ref = def.innerType;\n              break;\n            }\n          case \"success\":\n            {\n              const json = _json;\n              json.type = \"boolean\";\n              break;\n            }\n          case \"default\":\n            {\n              this.process(def.innerType, params);\n              result.ref = def.innerType;\n              _json.default = JSON.parse(JSON.stringify(def.defaultValue));\n              break;\n            }\n          case \"prefault\":\n            {\n              this.process(def.innerType, params);\n              result.ref = def.innerType;\n              if (this.io === \"input\") _json._prefault = JSON.parse(JSON.stringify(def.defaultValue));\n              break;\n            }\n          case \"catch\":\n            {\n              // use conditionals\n              this.process(def.innerType, params);\n              result.ref = def.innerType;\n              let catchValue;\n              try {\n                catchValue = def.catchValue(undefined);\n              } catch {\n                throw new Error(\"Dynamic catch values are not supported in JSON Schema\");\n              }\n              _json.default = catchValue;\n              break;\n            }\n          case \"nan\":\n            {\n              if (this.unrepresentable === \"throw\") {\n                throw new Error(\"NaN cannot be represented in JSON Schema\");\n              }\n              break;\n            }\n          case \"template_literal\":\n            {\n              const json = _json;\n              const pattern = schema._zod.pattern;\n              if (!pattern) throw new Error(\"Pattern not found in template literal\");\n              json.type = \"string\";\n              json.pattern = pattern.source;\n              break;\n            }\n          case \"pipe\":\n            {\n              const innerType = this.io === \"input\" ? def.in._zod.def.type === \"transform\" ? def.out : def.in : def.out;\n              this.process(innerType, params);\n              result.ref = innerType;\n              break;\n            }\n          case \"readonly\":\n            {\n              this.process(def.innerType, params);\n              result.ref = def.innerType;\n              _json.readOnly = true;\n              break;\n            }\n          // passthrough types\n          case \"promise\":\n            {\n              this.process(def.innerType, params);\n              result.ref = def.innerType;\n              break;\n            }\n          case \"optional\":\n            {\n              this.process(def.innerType, params);\n              result.ref = def.innerType;\n              break;\n            }\n          case \"lazy\":\n            {\n              const innerType = schema._zod.innerType;\n              this.process(innerType, params);\n              result.ref = innerType;\n              break;\n            }\n          case \"custom\":\n            {\n              if (this.unrepresentable === \"throw\") {\n                throw new Error(\"Custom types cannot be represented in JSON Schema\");\n              }\n              break;\n            }\n          default:\n            {\n              def;\n            }\n        }\n      }\n    }\n    // metadata\n    const meta = this.metadataRegistry.get(schema);\n    if (meta) Object.assign(result.schema, meta);\n    if (this.io === \"input\" && isTransforming(schema)) {\n      // examples/defaults only apply to output type of pipe\n      delete result.schema.examples;\n      delete result.schema.default;\n    }\n    // set prefault as default\n    if (this.io === \"input\" && result.schema._prefault) (_a = result.schema).default ?? (_a.default = result.schema._prefault);\n    delete result.schema._prefault;\n    // pulling fresh from this.seen in case it was overwritten\n    const _result = this.seen.get(schema);\n    return _result.schema;\n  }\n  emit(schema, _params) {\n    const params = {\n      cycles: _params?.cycles ?? \"ref\",\n      reused: _params?.reused ?? \"inline\",\n      // unrepresentable: _params?.unrepresentable ?? \"throw\",\n      // uri: _params?.uri ?? ((id) => `${id}`),\n      external: _params?.external ?? undefined\n    };\n    // iterate over seen map;\n    const root = this.seen.get(schema);\n    if (!root) throw new Error(\"Unprocessed schema. This is a bug in Zod.\");\n    // initialize result with root schema fields\n    // Object.assign(result, seen.cached);\n    // returns a ref to the schema\n    // defId will be empty if the ref points to an external schema (or #)\n    const makeURI = entry => {\n      // comparing the seen objects because sometimes\n      // multiple schemas map to the same seen object.\n      // e.g. lazy\n      // external is configured\n      const defsSegment = this.target === \"draft-2020-12\" ? \"$defs\" : \"definitions\";\n      if (params.external) {\n        const externalId = params.external.registry.get(entry[0])?.id; // ?? \"__shared\";// `__schema${this.counter++}`;\n        // check if schema is in the external registry\n        const uriGenerator = params.external.uri ?? (id => id);\n        if (externalId) {\n          return {\n            ref: uriGenerator(externalId)\n          };\n        }\n        // otherwise, add to __shared\n        const id = entry[1].defId ?? entry[1].schema.id ?? `schema${this.counter++}`;\n        entry[1].defId = id; // set defId so it will be reused if needed\n        return {\n          defId: id,\n          ref: `${uriGenerator(\"__shared\")}#/${defsSegment}/${id}`\n        };\n      }\n      if (entry[1] === root) {\n        return {\n          ref: \"#\"\n        };\n      }\n      // self-contained schema\n      const uriPrefix = `#`;\n      const defUriPrefix = `${uriPrefix}/${defsSegment}/`;\n      const defId = entry[1].schema.id ?? `__schema${this.counter++}`;\n      return {\n        defId,\n        ref: defUriPrefix + defId\n      };\n    };\n    // stored cached version in `def` property\n    // remove all properties, set $ref\n    const extractToDef = entry => {\n      // if the schema is already a reference, do not extract it\n      if (entry[1].schema.$ref) {\n        return;\n      }\n      const seen = entry[1];\n      const {\n        ref,\n        defId\n      } = makeURI(entry);\n      seen.def = {\n        ...seen.schema\n      };\n      // defId won't be set if the schema is a reference to an external schema\n      if (defId) seen.defId = defId;\n      // wipe away all properties except $ref\n      const schema = seen.schema;\n      for (const key in schema) {\n        delete schema[key];\n      }\n      schema.$ref = ref;\n    };\n    // throw on cycles\n    // break cycles\n    if (params.cycles === \"throw\") {\n      for (const entry of this.seen.entries()) {\n        const seen = entry[1];\n        if (seen.cycle) {\n          throw new Error(\"Cycle detected: \" + `#/${seen.cycle?.join(\"/\")}/<root>` + '\\n\\nSet the `cycles` parameter to `\"ref\"` to resolve cyclical schemas with defs.');\n        }\n      }\n    }\n    // extract schemas into $defs\n    for (const entry of this.seen.entries()) {\n      const seen = entry[1];\n      // convert root schema to # $ref\n      if (schema === entry[0]) {\n        extractToDef(entry); // this has special handling for the root schema\n        continue;\n      }\n      // extract schemas that are in the external registry\n      if (params.external) {\n        const ext = params.external.registry.get(entry[0])?.id;\n        if (schema !== entry[0] && ext) {\n          extractToDef(entry);\n          continue;\n        }\n      }\n      // extract schemas with `id` meta\n      const id = this.metadataRegistry.get(entry[0])?.id;\n      if (id) {\n        extractToDef(entry);\n        continue;\n      }\n      // break cycles\n      if (seen.cycle) {\n        // any\n        extractToDef(entry);\n        continue;\n      }\n      // extract reused schemas\n      if (seen.count > 1) {\n        if (params.reused === \"ref\") {\n          extractToDef(entry);\n          // biome-ignore lint:\n          continue;\n        }\n      }\n    }\n    // flatten _refs\n    const flattenRef = (zodSchema, params) => {\n      const seen = this.seen.get(zodSchema);\n      const schema = seen.def ?? seen.schema;\n      const _cached = {\n        ...schema\n      };\n      // already seen\n      if (seen.ref === null) {\n        return;\n      }\n      // flatten ref if defined\n      const ref = seen.ref;\n      seen.ref = null; // prevent recursion\n      if (ref) {\n        flattenRef(ref, params);\n        // merge referenced schema into current\n        const refSchema = this.seen.get(ref).schema;\n        if (refSchema.$ref && params.target === \"draft-7\") {\n          schema.allOf = schema.allOf ?? [];\n          schema.allOf.push(refSchema);\n        } else {\n          Object.assign(schema, refSchema);\n          Object.assign(schema, _cached); // prevent overwriting any fields in the original schema\n        }\n      }\n      // execute overrides\n      if (!seen.isParent) this.override({\n        zodSchema: zodSchema,\n        jsonSchema: schema,\n        path: seen.path ?? []\n      });\n    };\n    for (const entry of [...this.seen.entries()].reverse()) {\n      flattenRef(entry[0], {\n        target: this.target\n      });\n    }\n    const result = {};\n    if (this.target === \"draft-2020-12\") {\n      result.$schema = \"https://json-schema.org/draft/2020-12/schema\";\n    } else if (this.target === \"draft-7\") {\n      result.$schema = \"http://json-schema.org/draft-07/schema#\";\n    } else {\n      // @ts-ignore\n      console.warn(`Invalid target: ${this.target}`);\n    }\n    if (params.external?.uri) {\n      const id = params.external.registry.get(schema)?.id;\n      if (!id) throw new Error(\"Schema is missing an `id` property\");\n      result.$id = params.external.uri(id);\n    }\n    Object.assign(result, root.def);\n    // build defs object\n    const defs = params.external?.defs ?? {};\n    for (const entry of this.seen.entries()) {\n      const seen = entry[1];\n      if (seen.def && seen.defId) {\n        defs[seen.defId] = seen.def;\n      }\n    }\n    // set definitions in result\n    if (params.external) {} else {\n      if (Object.keys(defs).length > 0) {\n        if (this.target === \"draft-2020-12\") {\n          result.$defs = defs;\n        } else {\n          result.definitions = defs;\n        }\n      }\n    }\n    try {\n      // this \"finalizes\" this schema and ensures all cycles are removed\n      // each call to .emit() is functionally independent\n      // though the seen map is shared\n      return JSON.parse(JSON.stringify(result));\n    } catch (_err) {\n      throw new Error(\"Error converting schema to JSON.\");\n    }\n  }\n}\nexport function toJSONSchema(input, _params) {\n  if (input instanceof $ZodRegistry) {\n    const gen = new JSONSchemaGenerator(_params);\n    const defs = {};\n    for (const entry of input._idmap.entries()) {\n      const [_, schema] = entry;\n      gen.process(schema);\n    }\n    const schemas = {};\n    const external = {\n      registry: input,\n      uri: _params?.uri,\n      defs\n    };\n    for (const entry of input._idmap.entries()) {\n      const [key, schema] = entry;\n      schemas[key] = gen.emit(schema, {\n        ..._params,\n        external\n      });\n    }\n    if (Object.keys(defs).length > 0) {\n      const defsSegment = gen.target === \"draft-2020-12\" ? \"$defs\" : \"definitions\";\n      schemas.__shared = {\n        [defsSegment]: defs\n      };\n    }\n    return {\n      schemas\n    };\n  }\n  const gen = new JSONSchemaGenerator(_params);\n  gen.process(input);\n  return gen.emit(input, _params);\n}\nfunction isTransforming(_schema, _ctx) {\n  const ctx = _ctx ?? {\n    seen: new Set()\n  };\n  if (ctx.seen.has(_schema)) return false;\n  ctx.seen.add(_schema);\n  const schema = _schema;\n  const def = schema._zod.def;\n  switch (def.type) {\n    case \"string\":\n    case \"number\":\n    case \"bigint\":\n    case \"boolean\":\n    case \"date\":\n    case \"symbol\":\n    case \"undefined\":\n    case \"null\":\n    case \"any\":\n    case \"unknown\":\n    case \"never\":\n    case \"void\":\n    case \"literal\":\n    case \"enum\":\n    case \"nan\":\n    case \"file\":\n    case \"template_literal\":\n      return false;\n    case \"array\":\n      {\n        return isTransforming(def.element, ctx);\n      }\n    case \"object\":\n      {\n        for (const key in def.shape) {\n          if (isTransforming(def.shape[key], ctx)) return true;\n        }\n        return false;\n      }\n    case \"union\":\n      {\n        for (const option of def.options) {\n          if (isTransforming(option, ctx)) return true;\n        }\n        return false;\n      }\n    case \"intersection\":\n      {\n        return isTransforming(def.left, ctx) || isTransforming(def.right, ctx);\n      }\n    case \"tuple\":\n      {\n        for (const item of def.items) {\n          if (isTransforming(item, ctx)) return true;\n        }\n        if (def.rest && isTransforming(def.rest, ctx)) return true;\n        return false;\n      }\n    case \"record\":\n      {\n        return isTransforming(def.keyType, ctx) || isTransforming(def.valueType, ctx);\n      }\n    case \"map\":\n      {\n        return isTransforming(def.keyType, ctx) || isTransforming(def.valueType, ctx);\n      }\n    case \"set\":\n      {\n        return isTransforming(def.valueType, ctx);\n      }\n    // inner types\n    case \"promise\":\n    case \"optional\":\n    case \"nonoptional\":\n    case \"nullable\":\n    case \"readonly\":\n      return isTransforming(def.innerType, ctx);\n    case \"lazy\":\n      return isTransforming(def.getter(), ctx);\n    case \"default\":\n      {\n        return isTransforming(def.innerType, ctx);\n      }\n    case \"prefault\":\n      {\n        return isTransforming(def.innerType, ctx);\n      }\n    case \"custom\":\n      {\n        return false;\n      }\n    case \"transform\":\n      {\n        return true;\n      }\n    case \"pipe\":\n      {\n        return isTransforming(def.in, ctx) || isTransforming(def.out, ctx);\n      }\n    case \"success\":\n      {\n        return false;\n      }\n    case \"catch\":\n      {\n        return false;\n      }\n    default:\n      def;\n  }\n  throw new Error(`Unknown schema type: ${def.type}`);\n}","map":{"version":3,"names":["$ZodRegistry","globalRegistry","getEnumValues","JSONSchemaGenerator","constructor","params","counter","metadataRegistry","metadata","target","unrepresentable","override","io","seen","Map","process","schema","_params","arguments","length","undefined","path","schemaPath","_a","def","_zod","formatMap","guid","url","datetime","json_string","regex","get","count","isCycle","includes","cycle","result","set","overrideSchema","toJSONSchema","parent","ref","isParent","_json","type","json","minimum","maximum","format","patterns","contentEncoding","bag","minLength","maxLength","size","regexes","pattern","source","allOf","map","multipleOf","exclusiveMaximum","exclusiveMinimum","Error","not","minItems","maxItems","items","element","properties","shape","key","allKeys","Set","Object","keys","requiredKeys","filter","v","optin","optout","required","Array","from","catchall","additionalProperties","anyOf","options","x","i","a","left","b","right","isSimpleIntersection","val","prefixItems","rest","additionalItems","propertyNames","keyType","valueType","values","entries","every","enum","vals","push","Number","const","file","mime","contentMediaType","assign","m","mFile","inner","innerType","default","JSON","parse","stringify","defaultValue","_prefault","catchValue","in","out","readOnly","meta","isTransforming","examples","_result","emit","cycles","reused","external","root","makeURI","entry","defsSegment","externalId","registry","id","uriGenerator","uri","defId","uriPrefix","defUriPrefix","extractToDef","$ref","join","ext","flattenRef","zodSchema","_cached","refSchema","jsonSchema","reverse","$schema","console","warn","$id","defs","$defs","definitions","_err","input","gen","_idmap","_","schemas","__shared","_schema","_ctx","ctx","has","add","option","item","getter"],"sources":["/Users/kyliekoshet/Documents/MyProjects/JobAppliciationTracker/JobAppTrackerFrontend/node_modules/zod/v4/core/to-json-schema.js"],"sourcesContent":["import { $ZodRegistry, globalRegistry } from \"./registries.js\";\nimport { getEnumValues } from \"./util.js\";\nexport class JSONSchemaGenerator {\n    constructor(params) {\n        this.counter = 0;\n        this.metadataRegistry = params?.metadata ?? globalRegistry;\n        this.target = params?.target ?? \"draft-2020-12\";\n        this.unrepresentable = params?.unrepresentable ?? \"throw\";\n        this.override = params?.override ?? (() => { });\n        this.io = params?.io ?? \"output\";\n        this.seen = new Map();\n    }\n    process(schema, _params = { path: [], schemaPath: [] }) {\n        var _a;\n        const def = schema._zod.def;\n        const formatMap = {\n            guid: \"uuid\",\n            url: \"uri\",\n            datetime: \"date-time\",\n            json_string: \"json-string\",\n            regex: \"\", // do not set\n        };\n        // check for schema in seens\n        const seen = this.seen.get(schema);\n        if (seen) {\n            seen.count++;\n            // check if cycle\n            const isCycle = _params.schemaPath.includes(schema);\n            if (isCycle) {\n                seen.cycle = _params.path;\n            }\n            return seen.schema;\n        }\n        // initialize\n        const result = { schema: {}, count: 1, cycle: undefined, path: _params.path };\n        this.seen.set(schema, result);\n        // custom method overrides default behavior\n        const overrideSchema = schema._zod.toJSONSchema?.();\n        if (overrideSchema) {\n            result.schema = overrideSchema;\n        }\n        else {\n            const params = {\n                ..._params,\n                schemaPath: [..._params.schemaPath, schema],\n                path: _params.path,\n            };\n            const parent = schema._zod.parent;\n            if (parent) {\n                // schema was cloned from another schema\n                result.ref = parent;\n                this.process(parent, params);\n                this.seen.get(parent).isParent = true;\n            }\n            else {\n                const _json = result.schema;\n                switch (def.type) {\n                    case \"string\": {\n                        const json = _json;\n                        json.type = \"string\";\n                        const { minimum, maximum, format, patterns, contentEncoding } = schema._zod\n                            .bag;\n                        if (typeof minimum === \"number\")\n                            json.minLength = minimum;\n                        if (typeof maximum === \"number\")\n                            json.maxLength = maximum;\n                        // custom pattern overrides format\n                        if (format) {\n                            json.format = formatMap[format] ?? format;\n                            if (json.format === \"\")\n                                delete json.format; // empty format is not valid\n                        }\n                        if (contentEncoding)\n                            json.contentEncoding = contentEncoding;\n                        if (patterns && patterns.size > 0) {\n                            const regexes = [...patterns];\n                            if (regexes.length === 1)\n                                json.pattern = regexes[0].source;\n                            else if (regexes.length > 1) {\n                                result.schema.allOf = [\n                                    ...regexes.map((regex) => ({\n                                        ...(this.target === \"draft-7\" ? { type: \"string\" } : {}),\n                                        pattern: regex.source,\n                                    })),\n                                ];\n                            }\n                        }\n                        break;\n                    }\n                    case \"number\": {\n                        const json = _json;\n                        const { minimum, maximum, format, multipleOf, exclusiveMaximum, exclusiveMinimum } = schema._zod.bag;\n                        if (typeof format === \"string\" && format.includes(\"int\"))\n                            json.type = \"integer\";\n                        else\n                            json.type = \"number\";\n                        if (typeof exclusiveMinimum === \"number\")\n                            json.exclusiveMinimum = exclusiveMinimum;\n                        if (typeof minimum === \"number\") {\n                            json.minimum = minimum;\n                            if (typeof exclusiveMinimum === \"number\") {\n                                if (exclusiveMinimum >= minimum)\n                                    delete json.minimum;\n                                else\n                                    delete json.exclusiveMinimum;\n                            }\n                        }\n                        if (typeof exclusiveMaximum === \"number\")\n                            json.exclusiveMaximum = exclusiveMaximum;\n                        if (typeof maximum === \"number\") {\n                            json.maximum = maximum;\n                            if (typeof exclusiveMaximum === \"number\") {\n                                if (exclusiveMaximum <= maximum)\n                                    delete json.maximum;\n                                else\n                                    delete json.exclusiveMaximum;\n                            }\n                        }\n                        if (typeof multipleOf === \"number\")\n                            json.multipleOf = multipleOf;\n                        break;\n                    }\n                    case \"boolean\": {\n                        const json = _json;\n                        json.type = \"boolean\";\n                        break;\n                    }\n                    case \"bigint\": {\n                        if (this.unrepresentable === \"throw\") {\n                            throw new Error(\"BigInt cannot be represented in JSON Schema\");\n                        }\n                        break;\n                    }\n                    case \"symbol\": {\n                        if (this.unrepresentable === \"throw\") {\n                            throw new Error(\"Symbols cannot be represented in JSON Schema\");\n                        }\n                        break;\n                    }\n                    case \"null\": {\n                        _json.type = \"null\";\n                        break;\n                    }\n                    case \"any\": {\n                        break;\n                    }\n                    case \"unknown\": {\n                        break;\n                    }\n                    case \"undefined\": {\n                        if (this.unrepresentable === \"throw\") {\n                            throw new Error(\"Undefined cannot be represented in JSON Schema\");\n                        }\n                        break;\n                    }\n                    case \"void\": {\n                        if (this.unrepresentable === \"throw\") {\n                            throw new Error(\"Void cannot be represented in JSON Schema\");\n                        }\n                        break;\n                    }\n                    case \"never\": {\n                        _json.not = {};\n                        break;\n                    }\n                    case \"date\": {\n                        if (this.unrepresentable === \"throw\") {\n                            throw new Error(\"Date cannot be represented in JSON Schema\");\n                        }\n                        break;\n                    }\n                    case \"array\": {\n                        const json = _json;\n                        const { minimum, maximum } = schema._zod.bag;\n                        if (typeof minimum === \"number\")\n                            json.minItems = minimum;\n                        if (typeof maximum === \"number\")\n                            json.maxItems = maximum;\n                        json.type = \"array\";\n                        json.items = this.process(def.element, { ...params, path: [...params.path, \"items\"] });\n                        break;\n                    }\n                    case \"object\": {\n                        const json = _json;\n                        json.type = \"object\";\n                        json.properties = {};\n                        const shape = def.shape; // params.shapeCache.get(schema)!;\n                        for (const key in shape) {\n                            json.properties[key] = this.process(shape[key], {\n                                ...params,\n                                path: [...params.path, \"properties\", key],\n                            });\n                        }\n                        // required keys\n                        const allKeys = new Set(Object.keys(shape));\n                        // const optionalKeys = new Set(def.optional);\n                        const requiredKeys = new Set([...allKeys].filter((key) => {\n                            const v = def.shape[key]._zod;\n                            if (this.io === \"input\") {\n                                return v.optin === undefined;\n                            }\n                            else {\n                                return v.optout === undefined;\n                            }\n                        }));\n                        if (requiredKeys.size > 0) {\n                            json.required = Array.from(requiredKeys);\n                        }\n                        // catchall\n                        if (def.catchall?._zod.def.type === \"never\") {\n                            // strict\n                            json.additionalProperties = false;\n                        }\n                        else if (!def.catchall) {\n                            // regular\n                            if (this.io === \"output\")\n                                json.additionalProperties = false;\n                        }\n                        else if (def.catchall) {\n                            json.additionalProperties = this.process(def.catchall, {\n                                ...params,\n                                path: [...params.path, \"additionalProperties\"],\n                            });\n                        }\n                        break;\n                    }\n                    case \"union\": {\n                        const json = _json;\n                        json.anyOf = def.options.map((x, i) => this.process(x, {\n                            ...params,\n                            path: [...params.path, \"anyOf\", i],\n                        }));\n                        break;\n                    }\n                    case \"intersection\": {\n                        const json = _json;\n                        const a = this.process(def.left, {\n                            ...params,\n                            path: [...params.path, \"allOf\", 0],\n                        });\n                        const b = this.process(def.right, {\n                            ...params,\n                            path: [...params.path, \"allOf\", 1],\n                        });\n                        const isSimpleIntersection = (val) => \"allOf\" in val && Object.keys(val).length === 1;\n                        const allOf = [\n                            ...(isSimpleIntersection(a) ? a.allOf : [a]),\n                            ...(isSimpleIntersection(b) ? b.allOf : [b]),\n                        ];\n                        json.allOf = allOf;\n                        break;\n                    }\n                    case \"tuple\": {\n                        const json = _json;\n                        json.type = \"array\";\n                        const prefixItems = def.items.map((x, i) => this.process(x, { ...params, path: [...params.path, \"prefixItems\", i] }));\n                        if (this.target === \"draft-2020-12\") {\n                            json.prefixItems = prefixItems;\n                        }\n                        else {\n                            json.items = prefixItems;\n                        }\n                        if (def.rest) {\n                            const rest = this.process(def.rest, {\n                                ...params,\n                                path: [...params.path, \"items\"],\n                            });\n                            if (this.target === \"draft-2020-12\") {\n                                json.items = rest;\n                            }\n                            else {\n                                json.additionalItems = rest;\n                            }\n                        }\n                        // additionalItems\n                        if (def.rest) {\n                            json.items = this.process(def.rest, {\n                                ...params,\n                                path: [...params.path, \"items\"],\n                            });\n                        }\n                        // length\n                        const { minimum, maximum } = schema._zod.bag;\n                        if (typeof minimum === \"number\")\n                            json.minItems = minimum;\n                        if (typeof maximum === \"number\")\n                            json.maxItems = maximum;\n                        break;\n                    }\n                    case \"record\": {\n                        const json = _json;\n                        json.type = \"object\";\n                        json.propertyNames = this.process(def.keyType, { ...params, path: [...params.path, \"propertyNames\"] });\n                        json.additionalProperties = this.process(def.valueType, {\n                            ...params,\n                            path: [...params.path, \"additionalProperties\"],\n                        });\n                        break;\n                    }\n                    case \"map\": {\n                        if (this.unrepresentable === \"throw\") {\n                            throw new Error(\"Map cannot be represented in JSON Schema\");\n                        }\n                        break;\n                    }\n                    case \"set\": {\n                        if (this.unrepresentable === \"throw\") {\n                            throw new Error(\"Set cannot be represented in JSON Schema\");\n                        }\n                        break;\n                    }\n                    case \"enum\": {\n                        const json = _json;\n                        const values = getEnumValues(def.entries);\n                        // Number enums can have both string and number values\n                        if (values.every((v) => typeof v === \"number\"))\n                            json.type = \"number\";\n                        if (values.every((v) => typeof v === \"string\"))\n                            json.type = \"string\";\n                        json.enum = values;\n                        break;\n                    }\n                    case \"literal\": {\n                        const json = _json;\n                        const vals = [];\n                        for (const val of def.values) {\n                            if (val === undefined) {\n                                if (this.unrepresentable === \"throw\") {\n                                    throw new Error(\"Literal `undefined` cannot be represented in JSON Schema\");\n                                }\n                                else {\n                                    // do not add to vals\n                                }\n                            }\n                            else if (typeof val === \"bigint\") {\n                                if (this.unrepresentable === \"throw\") {\n                                    throw new Error(\"BigInt literals cannot be represented in JSON Schema\");\n                                }\n                                else {\n                                    vals.push(Number(val));\n                                }\n                            }\n                            else {\n                                vals.push(val);\n                            }\n                        }\n                        if (vals.length === 0) {\n                            // do nothing (an undefined literal was stripped)\n                        }\n                        else if (vals.length === 1) {\n                            const val = vals[0];\n                            json.type = val === null ? \"null\" : typeof val;\n                            json.const = val;\n                        }\n                        else {\n                            if (vals.every((v) => typeof v === \"number\"))\n                                json.type = \"number\";\n                            if (vals.every((v) => typeof v === \"string\"))\n                                json.type = \"string\";\n                            if (vals.every((v) => typeof v === \"boolean\"))\n                                json.type = \"string\";\n                            if (vals.every((v) => v === null))\n                                json.type = \"null\";\n                            json.enum = vals;\n                        }\n                        break;\n                    }\n                    case \"file\": {\n                        const json = _json;\n                        const file = {\n                            type: \"string\",\n                            format: \"binary\",\n                            contentEncoding: \"binary\",\n                        };\n                        const { minimum, maximum, mime } = schema._zod.bag;\n                        if (minimum !== undefined)\n                            file.minLength = minimum;\n                        if (maximum !== undefined)\n                            file.maxLength = maximum;\n                        if (mime) {\n                            if (mime.length === 1) {\n                                file.contentMediaType = mime[0];\n                                Object.assign(json, file);\n                            }\n                            else {\n                                json.anyOf = mime.map((m) => {\n                                    const mFile = { ...file, contentMediaType: m };\n                                    return mFile;\n                                });\n                            }\n                        }\n                        else {\n                            Object.assign(json, file);\n                        }\n                        // if (this.unrepresentable === \"throw\") {\n                        //   throw new Error(\"File cannot be represented in JSON Schema\");\n                        // }\n                        break;\n                    }\n                    case \"transform\": {\n                        if (this.unrepresentable === \"throw\") {\n                            throw new Error(\"Transforms cannot be represented in JSON Schema\");\n                        }\n                        break;\n                    }\n                    case \"nullable\": {\n                        const inner = this.process(def.innerType, params);\n                        _json.anyOf = [inner, { type: \"null\" }];\n                        break;\n                    }\n                    case \"nonoptional\": {\n                        this.process(def.innerType, params);\n                        result.ref = def.innerType;\n                        break;\n                    }\n                    case \"success\": {\n                        const json = _json;\n                        json.type = \"boolean\";\n                        break;\n                    }\n                    case \"default\": {\n                        this.process(def.innerType, params);\n                        result.ref = def.innerType;\n                        _json.default = JSON.parse(JSON.stringify(def.defaultValue));\n                        break;\n                    }\n                    case \"prefault\": {\n                        this.process(def.innerType, params);\n                        result.ref = def.innerType;\n                        if (this.io === \"input\")\n                            _json._prefault = JSON.parse(JSON.stringify(def.defaultValue));\n                        break;\n                    }\n                    case \"catch\": {\n                        // use conditionals\n                        this.process(def.innerType, params);\n                        result.ref = def.innerType;\n                        let catchValue;\n                        try {\n                            catchValue = def.catchValue(undefined);\n                        }\n                        catch {\n                            throw new Error(\"Dynamic catch values are not supported in JSON Schema\");\n                        }\n                        _json.default = catchValue;\n                        break;\n                    }\n                    case \"nan\": {\n                        if (this.unrepresentable === \"throw\") {\n                            throw new Error(\"NaN cannot be represented in JSON Schema\");\n                        }\n                        break;\n                    }\n                    case \"template_literal\": {\n                        const json = _json;\n                        const pattern = schema._zod.pattern;\n                        if (!pattern)\n                            throw new Error(\"Pattern not found in template literal\");\n                        json.type = \"string\";\n                        json.pattern = pattern.source;\n                        break;\n                    }\n                    case \"pipe\": {\n                        const innerType = this.io === \"input\" ? (def.in._zod.def.type === \"transform\" ? def.out : def.in) : def.out;\n                        this.process(innerType, params);\n                        result.ref = innerType;\n                        break;\n                    }\n                    case \"readonly\": {\n                        this.process(def.innerType, params);\n                        result.ref = def.innerType;\n                        _json.readOnly = true;\n                        break;\n                    }\n                    // passthrough types\n                    case \"promise\": {\n                        this.process(def.innerType, params);\n                        result.ref = def.innerType;\n                        break;\n                    }\n                    case \"optional\": {\n                        this.process(def.innerType, params);\n                        result.ref = def.innerType;\n                        break;\n                    }\n                    case \"lazy\": {\n                        const innerType = schema._zod.innerType;\n                        this.process(innerType, params);\n                        result.ref = innerType;\n                        break;\n                    }\n                    case \"custom\": {\n                        if (this.unrepresentable === \"throw\") {\n                            throw new Error(\"Custom types cannot be represented in JSON Schema\");\n                        }\n                        break;\n                    }\n                    default: {\n                        def;\n                    }\n                }\n            }\n        }\n        // metadata\n        const meta = this.metadataRegistry.get(schema);\n        if (meta)\n            Object.assign(result.schema, meta);\n        if (this.io === \"input\" && isTransforming(schema)) {\n            // examples/defaults only apply to output type of pipe\n            delete result.schema.examples;\n            delete result.schema.default;\n        }\n        // set prefault as default\n        if (this.io === \"input\" && result.schema._prefault)\n            (_a = result.schema).default ?? (_a.default = result.schema._prefault);\n        delete result.schema._prefault;\n        // pulling fresh from this.seen in case it was overwritten\n        const _result = this.seen.get(schema);\n        return _result.schema;\n    }\n    emit(schema, _params) {\n        const params = {\n            cycles: _params?.cycles ?? \"ref\",\n            reused: _params?.reused ?? \"inline\",\n            // unrepresentable: _params?.unrepresentable ?? \"throw\",\n            // uri: _params?.uri ?? ((id) => `${id}`),\n            external: _params?.external ?? undefined,\n        };\n        // iterate over seen map;\n        const root = this.seen.get(schema);\n        if (!root)\n            throw new Error(\"Unprocessed schema. This is a bug in Zod.\");\n        // initialize result with root schema fields\n        // Object.assign(result, seen.cached);\n        // returns a ref to the schema\n        // defId will be empty if the ref points to an external schema (or #)\n        const makeURI = (entry) => {\n            // comparing the seen objects because sometimes\n            // multiple schemas map to the same seen object.\n            // e.g. lazy\n            // external is configured\n            const defsSegment = this.target === \"draft-2020-12\" ? \"$defs\" : \"definitions\";\n            if (params.external) {\n                const externalId = params.external.registry.get(entry[0])?.id; // ?? \"__shared\";// `__schema${this.counter++}`;\n                // check if schema is in the external registry\n                const uriGenerator = params.external.uri ?? ((id) => id);\n                if (externalId) {\n                    return { ref: uriGenerator(externalId) };\n                }\n                // otherwise, add to __shared\n                const id = entry[1].defId ?? entry[1].schema.id ?? `schema${this.counter++}`;\n                entry[1].defId = id; // set defId so it will be reused if needed\n                return { defId: id, ref: `${uriGenerator(\"__shared\")}#/${defsSegment}/${id}` };\n            }\n            if (entry[1] === root) {\n                return { ref: \"#\" };\n            }\n            // self-contained schema\n            const uriPrefix = `#`;\n            const defUriPrefix = `${uriPrefix}/${defsSegment}/`;\n            const defId = entry[1].schema.id ?? `__schema${this.counter++}`;\n            return { defId, ref: defUriPrefix + defId };\n        };\n        // stored cached version in `def` property\n        // remove all properties, set $ref\n        const extractToDef = (entry) => {\n            // if the schema is already a reference, do not extract it\n            if (entry[1].schema.$ref) {\n                return;\n            }\n            const seen = entry[1];\n            const { ref, defId } = makeURI(entry);\n            seen.def = { ...seen.schema };\n            // defId won't be set if the schema is a reference to an external schema\n            if (defId)\n                seen.defId = defId;\n            // wipe away all properties except $ref\n            const schema = seen.schema;\n            for (const key in schema) {\n                delete schema[key];\n            }\n            schema.$ref = ref;\n        };\n        // throw on cycles\n        // break cycles\n        if (params.cycles === \"throw\") {\n            for (const entry of this.seen.entries()) {\n                const seen = entry[1];\n                if (seen.cycle) {\n                    throw new Error(\"Cycle detected: \" +\n                        `#/${seen.cycle?.join(\"/\")}/<root>` +\n                        '\\n\\nSet the `cycles` parameter to `\"ref\"` to resolve cyclical schemas with defs.');\n                }\n            }\n        }\n        // extract schemas into $defs\n        for (const entry of this.seen.entries()) {\n            const seen = entry[1];\n            // convert root schema to # $ref\n            if (schema === entry[0]) {\n                extractToDef(entry); // this has special handling for the root schema\n                continue;\n            }\n            // extract schemas that are in the external registry\n            if (params.external) {\n                const ext = params.external.registry.get(entry[0])?.id;\n                if (schema !== entry[0] && ext) {\n                    extractToDef(entry);\n                    continue;\n                }\n            }\n            // extract schemas with `id` meta\n            const id = this.metadataRegistry.get(entry[0])?.id;\n            if (id) {\n                extractToDef(entry);\n                continue;\n            }\n            // break cycles\n            if (seen.cycle) {\n                // any\n                extractToDef(entry);\n                continue;\n            }\n            // extract reused schemas\n            if (seen.count > 1) {\n                if (params.reused === \"ref\") {\n                    extractToDef(entry);\n                    // biome-ignore lint:\n                    continue;\n                }\n            }\n        }\n        // flatten _refs\n        const flattenRef = (zodSchema, params) => {\n            const seen = this.seen.get(zodSchema);\n            const schema = seen.def ?? seen.schema;\n            const _cached = { ...schema };\n            // already seen\n            if (seen.ref === null) {\n                return;\n            }\n            // flatten ref if defined\n            const ref = seen.ref;\n            seen.ref = null; // prevent recursion\n            if (ref) {\n                flattenRef(ref, params);\n                // merge referenced schema into current\n                const refSchema = this.seen.get(ref).schema;\n                if (refSchema.$ref && params.target === \"draft-7\") {\n                    schema.allOf = schema.allOf ?? [];\n                    schema.allOf.push(refSchema);\n                }\n                else {\n                    Object.assign(schema, refSchema);\n                    Object.assign(schema, _cached); // prevent overwriting any fields in the original schema\n                }\n            }\n            // execute overrides\n            if (!seen.isParent)\n                this.override({\n                    zodSchema: zodSchema,\n                    jsonSchema: schema,\n                    path: seen.path ?? [],\n                });\n        };\n        for (const entry of [...this.seen.entries()].reverse()) {\n            flattenRef(entry[0], { target: this.target });\n        }\n        const result = {};\n        if (this.target === \"draft-2020-12\") {\n            result.$schema = \"https://json-schema.org/draft/2020-12/schema\";\n        }\n        else if (this.target === \"draft-7\") {\n            result.$schema = \"http://json-schema.org/draft-07/schema#\";\n        }\n        else {\n            // @ts-ignore\n            console.warn(`Invalid target: ${this.target}`);\n        }\n        if (params.external?.uri) {\n            const id = params.external.registry.get(schema)?.id;\n            if (!id)\n                throw new Error(\"Schema is missing an `id` property\");\n            result.$id = params.external.uri(id);\n        }\n        Object.assign(result, root.def);\n        // build defs object\n        const defs = params.external?.defs ?? {};\n        for (const entry of this.seen.entries()) {\n            const seen = entry[1];\n            if (seen.def && seen.defId) {\n                defs[seen.defId] = seen.def;\n            }\n        }\n        // set definitions in result\n        if (params.external) {\n        }\n        else {\n            if (Object.keys(defs).length > 0) {\n                if (this.target === \"draft-2020-12\") {\n                    result.$defs = defs;\n                }\n                else {\n                    result.definitions = defs;\n                }\n            }\n        }\n        try {\n            // this \"finalizes\" this schema and ensures all cycles are removed\n            // each call to .emit() is functionally independent\n            // though the seen map is shared\n            return JSON.parse(JSON.stringify(result));\n        }\n        catch (_err) {\n            throw new Error(\"Error converting schema to JSON.\");\n        }\n    }\n}\nexport function toJSONSchema(input, _params) {\n    if (input instanceof $ZodRegistry) {\n        const gen = new JSONSchemaGenerator(_params);\n        const defs = {};\n        for (const entry of input._idmap.entries()) {\n            const [_, schema] = entry;\n            gen.process(schema);\n        }\n        const schemas = {};\n        const external = {\n            registry: input,\n            uri: _params?.uri,\n            defs,\n        };\n        for (const entry of input._idmap.entries()) {\n            const [key, schema] = entry;\n            schemas[key] = gen.emit(schema, {\n                ..._params,\n                external,\n            });\n        }\n        if (Object.keys(defs).length > 0) {\n            const defsSegment = gen.target === \"draft-2020-12\" ? \"$defs\" : \"definitions\";\n            schemas.__shared = {\n                [defsSegment]: defs,\n            };\n        }\n        return { schemas };\n    }\n    const gen = new JSONSchemaGenerator(_params);\n    gen.process(input);\n    return gen.emit(input, _params);\n}\nfunction isTransforming(_schema, _ctx) {\n    const ctx = _ctx ?? { seen: new Set() };\n    if (ctx.seen.has(_schema))\n        return false;\n    ctx.seen.add(_schema);\n    const schema = _schema;\n    const def = schema._zod.def;\n    switch (def.type) {\n        case \"string\":\n        case \"number\":\n        case \"bigint\":\n        case \"boolean\":\n        case \"date\":\n        case \"symbol\":\n        case \"undefined\":\n        case \"null\":\n        case \"any\":\n        case \"unknown\":\n        case \"never\":\n        case \"void\":\n        case \"literal\":\n        case \"enum\":\n        case \"nan\":\n        case \"file\":\n        case \"template_literal\":\n            return false;\n        case \"array\": {\n            return isTransforming(def.element, ctx);\n        }\n        case \"object\": {\n            for (const key in def.shape) {\n                if (isTransforming(def.shape[key], ctx))\n                    return true;\n            }\n            return false;\n        }\n        case \"union\": {\n            for (const option of def.options) {\n                if (isTransforming(option, ctx))\n                    return true;\n            }\n            return false;\n        }\n        case \"intersection\": {\n            return isTransforming(def.left, ctx) || isTransforming(def.right, ctx);\n        }\n        case \"tuple\": {\n            for (const item of def.items) {\n                if (isTransforming(item, ctx))\n                    return true;\n            }\n            if (def.rest && isTransforming(def.rest, ctx))\n                return true;\n            return false;\n        }\n        case \"record\": {\n            return isTransforming(def.keyType, ctx) || isTransforming(def.valueType, ctx);\n        }\n        case \"map\": {\n            return isTransforming(def.keyType, ctx) || isTransforming(def.valueType, ctx);\n        }\n        case \"set\": {\n            return isTransforming(def.valueType, ctx);\n        }\n        // inner types\n        case \"promise\":\n        case \"optional\":\n        case \"nonoptional\":\n        case \"nullable\":\n        case \"readonly\":\n            return isTransforming(def.innerType, ctx);\n        case \"lazy\":\n            return isTransforming(def.getter(), ctx);\n        case \"default\": {\n            return isTransforming(def.innerType, ctx);\n        }\n        case \"prefault\": {\n            return isTransforming(def.innerType, ctx);\n        }\n        case \"custom\": {\n            return false;\n        }\n        case \"transform\": {\n            return true;\n        }\n        case \"pipe\": {\n            return isTransforming(def.in, ctx) || isTransforming(def.out, ctx);\n        }\n        case \"success\": {\n            return false;\n        }\n        case \"catch\": {\n            return false;\n        }\n        default:\n            def;\n    }\n    throw new Error(`Unknown schema type: ${def.type}`);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}