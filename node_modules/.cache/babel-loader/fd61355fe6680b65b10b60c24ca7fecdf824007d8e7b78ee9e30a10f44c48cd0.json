{"ast":null,"code":"export const $output = Symbol(\"ZodOutput\");\nexport const $input = Symbol(\"ZodInput\");\nexport class $ZodRegistry {\n  constructor() {\n    this._map = new Map();\n    this._idmap = new Map();\n  }\n  add(schema) {\n    const meta = arguments.length <= 1 ? undefined : arguments[1];\n    this._map.set(schema, meta);\n    if (meta && typeof meta === \"object\" && \"id\" in meta) {\n      if (this._idmap.has(meta.id)) {\n        throw new Error(`ID ${meta.id} already exists in the registry`);\n      }\n      this._idmap.set(meta.id, schema);\n    }\n    return this;\n  }\n  clear() {\n    this._map = new Map();\n    this._idmap = new Map();\n    return this;\n  }\n  remove(schema) {\n    const meta = this._map.get(schema);\n    if (meta && typeof meta === \"object\" && \"id\" in meta) {\n      this._idmap.delete(meta.id);\n    }\n    this._map.delete(schema);\n    return this;\n  }\n  get(schema) {\n    // return this._map.get(schema) as any;\n    // inherit metadata\n    const p = schema._zod.parent;\n    if (p) {\n      const pm = {\n        ...(this.get(p) ?? {})\n      };\n      delete pm.id; // do not inherit id\n      const f = {\n        ...pm,\n        ...this._map.get(schema)\n      };\n      return Object.keys(f).length ? f : undefined;\n    }\n    return this._map.get(schema);\n  }\n  has(schema) {\n    return this._map.has(schema);\n  }\n}\n// registries\nexport function registry() {\n  return new $ZodRegistry();\n}\nexport const globalRegistry = /*@__PURE__*/registry();","map":{"version":3,"names":["$output","Symbol","$input","$ZodRegistry","constructor","_map","Map","_idmap","add","schema","meta","arguments","length","undefined","set","has","id","Error","clear","remove","get","delete","p","_zod","parent","pm","f","Object","keys","registry","globalRegistry"],"sources":["/Users/kyliekoshet/Documents/MyProjects/JobAppliciationTracker/JobAppTrackerFrontend/node_modules/zod/v4/core/registries.js"],"sourcesContent":["export const $output = Symbol(\"ZodOutput\");\nexport const $input = Symbol(\"ZodInput\");\nexport class $ZodRegistry {\n    constructor() {\n        this._map = new Map();\n        this._idmap = new Map();\n    }\n    add(schema, ..._meta) {\n        const meta = _meta[0];\n        this._map.set(schema, meta);\n        if (meta && typeof meta === \"object\" && \"id\" in meta) {\n            if (this._idmap.has(meta.id)) {\n                throw new Error(`ID ${meta.id} already exists in the registry`);\n            }\n            this._idmap.set(meta.id, schema);\n        }\n        return this;\n    }\n    clear() {\n        this._map = new Map();\n        this._idmap = new Map();\n        return this;\n    }\n    remove(schema) {\n        const meta = this._map.get(schema);\n        if (meta && typeof meta === \"object\" && \"id\" in meta) {\n            this._idmap.delete(meta.id);\n        }\n        this._map.delete(schema);\n        return this;\n    }\n    get(schema) {\n        // return this._map.get(schema) as any;\n        // inherit metadata\n        const p = schema._zod.parent;\n        if (p) {\n            const pm = { ...(this.get(p) ?? {}) };\n            delete pm.id; // do not inherit id\n            const f = { ...pm, ...this._map.get(schema) };\n            return Object.keys(f).length ? f : undefined;\n        }\n        return this._map.get(schema);\n    }\n    has(schema) {\n        return this._map.has(schema);\n    }\n}\n// registries\nexport function registry() {\n    return new $ZodRegistry();\n}\nexport const globalRegistry = /*@__PURE__*/ registry();\n"],"mappings":"AAAA,OAAO,MAAMA,OAAO,GAAGC,MAAM,CAAC,WAAW,CAAC;AAC1C,OAAO,MAAMC,MAAM,GAAGD,MAAM,CAAC,UAAU,CAAC;AACxC,OAAO,MAAME,YAAY,CAAC;EACtBC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,IAAI,GAAG,IAAIC,GAAG,CAAC,CAAC;IACrB,IAAI,CAACC,MAAM,GAAG,IAAID,GAAG,CAAC,CAAC;EAC3B;EACAE,GAAGA,CAACC,MAAM,EAAY;IAClB,MAAMC,IAAI,GAAAC,SAAA,CAAAC,MAAA,QAAAC,SAAA,GAAAF,SAAA,GAAW;IACrB,IAAI,CAACN,IAAI,CAACS,GAAG,CAACL,MAAM,EAAEC,IAAI,CAAC;IAC3B,IAAIA,IAAI,IAAI,OAAOA,IAAI,KAAK,QAAQ,IAAI,IAAI,IAAIA,IAAI,EAAE;MAClD,IAAI,IAAI,CAACH,MAAM,CAACQ,GAAG,CAACL,IAAI,CAACM,EAAE,CAAC,EAAE;QAC1B,MAAM,IAAIC,KAAK,CAAC,MAAMP,IAAI,CAACM,EAAE,iCAAiC,CAAC;MACnE;MACA,IAAI,CAACT,MAAM,CAACO,GAAG,CAACJ,IAAI,CAACM,EAAE,EAAEP,MAAM,CAAC;IACpC;IACA,OAAO,IAAI;EACf;EACAS,KAAKA,CAAA,EAAG;IACJ,IAAI,CAACb,IAAI,GAAG,IAAIC,GAAG,CAAC,CAAC;IACrB,IAAI,CAACC,MAAM,GAAG,IAAID,GAAG,CAAC,CAAC;IACvB,OAAO,IAAI;EACf;EACAa,MAAMA,CAACV,MAAM,EAAE;IACX,MAAMC,IAAI,GAAG,IAAI,CAACL,IAAI,CAACe,GAAG,CAACX,MAAM,CAAC;IAClC,IAAIC,IAAI,IAAI,OAAOA,IAAI,KAAK,QAAQ,IAAI,IAAI,IAAIA,IAAI,EAAE;MAClD,IAAI,CAACH,MAAM,CAACc,MAAM,CAACX,IAAI,CAACM,EAAE,CAAC;IAC/B;IACA,IAAI,CAACX,IAAI,CAACgB,MAAM,CAACZ,MAAM,CAAC;IACxB,OAAO,IAAI;EACf;EACAW,GAAGA,CAACX,MAAM,EAAE;IACR;IACA;IACA,MAAMa,CAAC,GAAGb,MAAM,CAACc,IAAI,CAACC,MAAM;IAC5B,IAAIF,CAAC,EAAE;MACH,MAAMG,EAAE,GAAG;QAAE,IAAI,IAAI,CAACL,GAAG,CAACE,CAAC,CAAC,IAAI,CAAC,CAAC;MAAE,CAAC;MACrC,OAAOG,EAAE,CAACT,EAAE,CAAC,CAAC;MACd,MAAMU,CAAC,GAAG;QAAE,GAAGD,EAAE;QAAE,GAAG,IAAI,CAACpB,IAAI,CAACe,GAAG,CAACX,MAAM;MAAE,CAAC;MAC7C,OAAOkB,MAAM,CAACC,IAAI,CAACF,CAAC,CAAC,CAACd,MAAM,GAAGc,CAAC,GAAGb,SAAS;IAChD;IACA,OAAO,IAAI,CAACR,IAAI,CAACe,GAAG,CAACX,MAAM,CAAC;EAChC;EACAM,GAAGA,CAACN,MAAM,EAAE;IACR,OAAO,IAAI,CAACJ,IAAI,CAACU,GAAG,CAACN,MAAM,CAAC;EAChC;AACJ;AACA;AACA,OAAO,SAASoB,QAAQA,CAAA,EAAG;EACvB,OAAO,IAAI1B,YAAY,CAAC,CAAC;AAC7B;AACA,OAAO,MAAM2B,cAAc,GAAG,aAAcD,QAAQ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}